using Microsoft.AspNetCore.OpenApi;
using Microsoft.OpenApi.Models;

namespace ModernAPI.API.OpenApi;

/// <summary>
/// OpenAPI document transformer that enhances the generated documentation with comprehensive
/// HTTP status code information and Problem Details schema definitions.
/// This ensures all possible response types are properly documented for API consumers.
/// </summary>
public sealed class HttpStatusCodeOpenApiTransformer : IOpenApiDocumentTransformer
{
    /// <summary>
    /// Transforms the OpenAPI document to include comprehensive status code documentation.
    /// </summary>
    /// <param name="document">The OpenAPI document to transform</param>
    /// <param name="context">The transformation context</param>
    /// <param name="cancellationToken">Cancellation token</param>
    /// <returns>Completed task</returns>
    public Task TransformAsync(OpenApiDocument document, OpenApiDocumentTransformerContext context, CancellationToken cancellationToken)
    {
        // Add Problem Details schema definitions
        AddProblemDetailsSchemas(document);
        
        // Enhance operations with missing status code documentation
        EnhanceOperations(document);
        
        // Add global error responses documentation
        AddGlobalErrorResponses(document);
        
        return Task.CompletedTask;
    }
    
    /// <summary>
    /// Adds Problem Details schema definitions to the OpenAPI document components.
    /// </summary>
    /// <param name="document">The OpenAPI document</param>
    private static void AddProblemDetailsSchemas(OpenApiDocument document)
    {
        document.Components ??= new OpenApiComponents();
        document.Components.Schemas ??= new Dictionary<string, OpenApiSchema>();
        
        // RFC 7807 Problem Details schema
        if (!document.Components.Schemas.ContainsKey("ProblemDetails"))
        {
            document.Components.Schemas.Add("ProblemDetails", new OpenApiSchema
            {
                Type = "object",
                Description = "A machine-readable format for specifying errors in HTTP API responses based on RFC 7807",
                Properties = new Dictionary<string, OpenApiSchema>
                {
                    ["type"] = new OpenApiSchema
                    {
                        Type = "string",
                        Format = "uri",
                        Description = "A URI reference that identifies the problem type",
                        Example = new Microsoft.OpenApi.Any.OpenApiString("https://tools.ietf.org/html/rfc7231#section-6.5.4")
                    },
                    ["title"] = new OpenApiSchema
                    {
                        Type = "string",
                        Description = "A short, human-readable summary of the problem type",
                        Example = new Microsoft.OpenApi.Any.OpenApiString("Not Found")
                    },
                    ["status"] = new OpenApiSchema
                    {
                        Type = "integer",
                        Format = "int32",
                        Description = "The HTTP status code generated by the origin server",
                        Example = new Microsoft.OpenApi.Any.OpenApiInteger(404)
                    },
                    ["detail"] = new OpenApiSchema
                    {
                        Type = "string",
                        Description = "A human-readable explanation specific to this occurrence of the problem",
                        Example = new Microsoft.OpenApi.Any.OpenApiString("The requested resource was not found")
                    },
                    ["instance"] = new OpenApiSchema
                    {
                        Type = "string",
                        Format = "uri",
                        Description = "A URI reference that identifies the specific occurrence of the problem",
                        Example = new Microsoft.OpenApi.Any.OpenApiString("/api/v1/users/123")
                    },
                    ["requestId"] = new OpenApiSchema
                    {
                        Type = "string",
                        Description = "Unique identifier for the request for correlation and debugging",
                        Example = new Microsoft.OpenApi.Any.OpenApiString("80000001-0001-f700-b63f-84710c7967bb")
                    },
                    ["timestamp"] = new OpenApiSchema
                    {
                        Type = "string",
                        Format = "date-time",
                        Description = "The timestamp when the error occurred",
                        Example = new Microsoft.OpenApi.Any.OpenApiString("2025-01-15T10:30:00Z")
                    }
                },
                Required = new HashSet<string> { "type", "title", "status" },
                AdditionalProperties = new OpenApiSchema { Type = "object" }
            });
        }
        
        // Validation Problem Details schema (extends Problem Details)
        if (!document.Components.Schemas.ContainsKey("ValidationProblemDetails"))
        {
            document.Components.Schemas.Add("ValidationProblemDetails", new OpenApiSchema
            {
                AllOf = new List<OpenApiSchema>
                {
                    new OpenApiSchema
                    {
                        Reference = new OpenApiReference
                        {
                            Type = ReferenceType.Schema,
                            Id = "ProblemDetails"
                        }
                    },
                    new OpenApiSchema
                    {
                        Type = "object",
                        Description = "A machine-readable format for specifying validation errors in HTTP API responses",
                        Properties = new Dictionary<string, OpenApiSchema>
                        {
                            ["errors"] = new OpenApiSchema
                            {
                                Type = "object",
                                Description = "Validation errors grouped by field name",
                                AdditionalProperties = new OpenApiSchema
                                {
                                    Type = "array",
                                    Items = new OpenApiSchema
                                    {
                                        Type = "string",
                                        Description = "Validation error message"
                                    }
                                },
                                Example = new Microsoft.OpenApi.Any.OpenApiObject
                                {
                                    ["Email"] = new Microsoft.OpenApi.Any.OpenApiArray
                                    {
                                        new Microsoft.OpenApi.Any.OpenApiString("Email is required"),
                                        new Microsoft.OpenApi.Any.OpenApiString("Email format is invalid")
                                    },
                                    ["DisplayName"] = new Microsoft.OpenApi.Any.OpenApiArray
                                    {
                                        new Microsoft.OpenApi.Any.OpenApiString("Display name must be between 2 and 50 characters")
                                    }
                                }
                            }
                        },
                        Required = new HashSet<string> { "errors" }
                    }
                }
            });
        }
    }
    
    /// <summary>
    /// Enhances existing operations with missing status code documentation.
    /// </summary>
    /// <param name="document">The OpenAPI document</param>
    private static void EnhanceOperations(OpenApiDocument document)
    {
        if (document.Paths == null) return;
        
        foreach (var pathItem in document.Paths.Values)
        {
            foreach (var operation in pathItem.Operations.Values)
            {
                EnhanceOperation(operation);
            }
        }
    }
    
    /// <summary>
    /// Enhances a single operation with comprehensive status code documentation.
    /// </summary>
    /// <param name="operation">The OpenAPI operation to enhance</param>
    private static void EnhanceOperation(OpenApiOperation operation)
    {
        operation.Responses ??= new OpenApiResponses();
        
        // Determine operation type based on existing responses and operation ID
        var isAuthRequired = HasSecurityRequirements(operation);
        var isGetOperation = operation.OperationId?.Contains("Get") == true;
        var isPostOperation = operation.OperationId?.Contains("Create") == true || operation.OperationId?.Contains("Register") == true;
        var isPutPatchOperation = operation.OperationId?.Contains("Update") == true || operation.OperationId?.Contains("Patch") == true;
        var isDeleteOperation = operation.OperationId?.Contains("Delete") == true;
        var hasValidation = operation.RequestBody != null || operation.Parameters?.Any() == true;
        
        // Add missing common error responses
        AddMissingResponse(operation, "400", "Bad Request - Invalid request format or malformed data", "ProblemDetails");
        
        if (hasValidation)
        {
            AddMissingResponse(operation, "422", "Unprocessable Entity - Validation errors", "ValidationProblemDetails");
        }
        
        if (isAuthRequired)
        {
            AddMissingResponse(operation, "401", "Unauthorized - Authentication required", "ProblemDetails");
            
            // Add 403 for operations that might have authorization checks
            if (isPutPatchOperation || isDeleteOperation || operation.OperationId?.Contains("Admin") == true)
            {
                AddMissingResponse(operation, "403", "Forbidden - Insufficient permissions", "ProblemDetails");
            }
        }
        
        // Add resource-specific responses
        if (isGetOperation || isPutPatchOperation || isDeleteOperation)
        {
            AddMissingResponse(operation, "404", "Not Found - Resource not found", "ProblemDetails");
        }
        
        if (isPostOperation)
        {
            AddMissingResponse(operation, "409", "Conflict - Resource already exists or conflicts with current state", "ProblemDetails");
        }
        
        if (isPutPatchOperation && (operation.OperationId?.Contains("ConditionalUpdate") == true || 
                                   operation.Parameters?.Any(p => p.Name.Contains("If-Match")) == true))
        {
            AddMissingResponse(operation, "412", "Precondition Failed - Resource has been modified", "ProblemDetails");
        }
        
        // Add 304 Not Modified for cacheable GET operations
        if (isGetOperation && operation.OperationId?.Contains("Get") == true)
        {
            AddMissingResponse(operation, "304", "Not Modified - Resource has not been modified", null, false);
        }
        
        // Add 500 Internal Server Error as a fallback
        AddMissingResponse(operation, "500", "Internal Server Error - An unexpected error occurred", "ProblemDetails");
    }
    
    /// <summary>
    /// Adds a missing response to an operation if it doesn't already exist.
    /// </summary>
    /// <param name="operation">The operation to add the response to</param>
    /// <param name="statusCode">The HTTP status code</param>
    /// <param name="description">The response description</param>
    /// <param name="schemaName">The schema name for the response body (optional)</param>
    /// <param name="hasContent">Whether the response has content (default: true for error responses, false for 304)</param>
    private static void AddMissingResponse(OpenApiOperation operation, string statusCode, string description, string? schemaName, bool? hasContent = null)
    {
        if (operation.Responses.ContainsKey(statusCode)) return;
        
        var response = new OpenApiResponse
        {
            Description = description
        };
        
        // Determine if response should have content
        var shouldHaveContent = hasContent ?? (statusCode != "304" && statusCode != "204");
        
        if (shouldHaveContent && !string.IsNullOrEmpty(schemaName))
        {
            response.Content = new Dictionary<string, OpenApiMediaType>
            {
                ["application/problem+json"] = new OpenApiMediaType
                {
                    Schema = new OpenApiSchema
                    {
                        Reference = new OpenApiReference
                        {
                            Type = ReferenceType.Schema,
                            Id = schemaName
                        }
                    }
                }
            };
        }
        
        operation.Responses[statusCode] = response;
    }
    
    /// <summary>
    /// Checks if an operation has security requirements (authentication required).
    /// </summary>
    /// <param name="operation">The operation to check</param>
    /// <returns>True if the operation requires authentication</returns>
    private static bool HasSecurityRequirements(OpenApiOperation operation)
    {
        return operation.Security?.Any() == true || 
               operation.Tags?.Any(tag => tag.Name?.Contains("Auth") == true || tag.Name?.Contains("Users") == true) == true;
    }
    
    /// <summary>
    /// Adds global error response documentation to the document info.
    /// </summary>
    /// <param name="document">The OpenAPI document</param>
    private static void AddGlobalErrorResponses(OpenApiDocument document)
    {
        // Add global error response information to the description
        var errorResponsesDoc = @"

## Global Error Responses

All API endpoints may return the following error responses:

### 400 Bad Request
Returned when the request is malformed, has invalid syntax, or contains invalid parameters.
Response body: `ProblemDetails`

### 401 Unauthorized  
Returned when authentication is required but not provided or is invalid.
Response body: `ProblemDetails`

### 403 Forbidden
Returned when the user is authenticated but does not have permission to access the resource.
Response body: `ProblemDetails`

### 404 Not Found
Returned when the requested resource does not exist.
Response body: `ProblemDetails`

### 409 Conflict
Returned when the request conflicts with the current state of the resource (e.g., duplicate email).
Response body: `ProblemDetails`

### 412 Precondition Failed
Returned when conditional headers (If-Match, If-Unmodified-Since) indicate the resource has been modified.
Response body: `ProblemDetails`

### 422 Unprocessable Entity
Returned when the request is well-formed but contains validation errors.
Response body: `ValidationProblemDetails`

### 500 Internal Server Error
Returned when an unexpected server error occurs.
Response body: `ProblemDetails`

All error responses follow RFC 7807 Problem Details format and include:
- `type`: URI identifying the problem type
- `title`: Human-readable problem summary  
- `status`: HTTP status code
- `detail`: Specific error details
- `instance`: Request path where error occurred
- `requestId`: Unique request identifier for correlation
- `timestamp`: When the error occurred

Validation errors (422) additionally include:
- `errors`: Object with field names as keys and error messages as arrays

## Caching

GET endpoints support conditional requests:
- Send `If-None-Match` header with ETag value
- Receive `304 Not Modified` if resource unchanged
- Send `If-Match` header for updates to prevent lost updates
- Receive `412 Precondition Failed` if ETag mismatches
";
        
        document.Info.Description += errorResponsesDoc;
    }
}