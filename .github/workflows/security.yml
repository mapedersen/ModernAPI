name: üîí Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dependencies
          - code
          - secrets
          - docker

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '18'

# Concurrency: cancel previous runs on new push
concurrency:
  group: security-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # =============================================================================
  # Dependency Vulnerability Scanning
  # =============================================================================
  dependency-scan:
    name: üîç Dependency Scan
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.scan_type == 'full' ||
      github.event.inputs.scan_type == 'dependencies' ||
      github.event_name != 'workflow_dispatch'
    timeout-minutes: 15
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        
      - name: ‚ö° Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: üì¶ Restore dependencies
        run: dotnet restore
        
      - name: üîç .NET dependency vulnerability scan
        run: |
          echo "üîç Scanning .NET dependencies for vulnerabilities..."
          
          # List all packages with vulnerabilities
          dotnet list package --vulnerable --include-transitive 2>&1 | tee dependency-scan.log
          
          # Check if any vulnerabilities were found
          if grep -i "vulnerable" dependency-scan.log; then
            echo "‚ö†Ô∏è Vulnerable dependencies detected!"
            
            # Extract vulnerability details
            echo "üìã Vulnerability Summary:" >> security-summary.md
            echo "## üîç Dependency Vulnerabilities" >> security-summary.md
            echo '```' >> security-summary.md
            grep -A 10 -B 2 "vulnerable" dependency-scan.log >> security-summary.md
            echo '```' >> security-summary.md
            
            # Set severity based on vulnerability type
            if grep -i "critical\|high" dependency-scan.log; then
              echo "SEVERITY=high" >> $GITHUB_ENV
              exit 1  # Fail on high/critical vulnerabilities
            else
              echo "SEVERITY=medium" >> $GITHUB_ENV
            fi
          else
            echo "‚úÖ No vulnerable dependencies found"
            echo "SEVERITY=none" >> $GITHUB_ENV
          fi
          
      - name: ‚ö° Setup Node.js
        if: always()
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: üîç NPM audit
        if: always()
        run: |
          echo "üîç Scanning npm dependencies..."
          
          # Run npm audit
          npm audit --audit-level=moderate --json > npm-audit.json 2>/dev/null || true
          
          # Check results
          if [[ -s npm-audit.json ]]; then
            VULNERABILITY_COUNT=$(cat npm-audit.json | jq '.metadata.vulnerabilities.total' 2>/dev/null || echo "0")
            
            if [[ "$VULNERABILITY_COUNT" -gt 0 ]]; then
              echo "‚ö†Ô∏è Found $VULNERABILITY_COUNT npm vulnerabilities"
              
              echo "## üì¶ NPM Vulnerabilities" >> security-summary.md
              echo "**Total vulnerabilities:** $VULNERABILITY_COUNT" >> security-summary.md
              echo '```json' >> security-summary.md
              cat npm-audit.json | jq '.vulnerabilities' | head -50 >> security-summary.md
              echo '```' >> security-summary.md
            else
              echo "‚úÖ No npm vulnerabilities found"
            fi
          fi
          
      - name: üìä Upload dependency scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-results
          path: |
            dependency-scan.log
            npm-audit.json
            security-summary.md
          retention-days: 30
          
  # =============================================================================
  # Code Security Analysis
  # =============================================================================
  code-security:
    name: üîç Code Security Analysis
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.scan_type == 'full' ||
      github.event.inputs.scan_type == 'code' ||
      github.event_name != 'workflow_dispatch'
    timeout-minutes: 20
    
    permissions:
      security-events: write
      
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
          
      - name: üîç Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: csharp
          queries: +security-extended,security-and-quality
          
      - name: ‚ö° Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: üèóÔ∏è Build for CodeQL analysis
        run: |
          dotnet restore
          dotnet build --no-restore --configuration Release
          
      - name: üîç Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:csharp'
          
      - name: üîç Semgrep security scan
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/cwe-top-25
            p/r2c-best-practices
          publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
          publishDeployment: ${{ github.event_name == 'push' }}
          generateSarif: true
          
      - name: üìä Upload Semgrep SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
          
  # =============================================================================
  # Secret Scanning
  # =============================================================================
  secret-scan:
    name: üîê Secret Scanning
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.scan_type == 'full' ||
      github.event.inputs.scan_type == 'secrets' ||
      github.event_name != 'workflow_dispatch'
    timeout-minutes: 10
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: üîê TruffleHog secret scan
        uses: trufflesecurity/trufflehog@main
        with:
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          path: .
          extra_args: --debug --only-verified
          
      - name: üîê GitLeaks secret scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
          
      - name: üîç Manual secret pattern check
        run: |
          echo "üîç Checking for common secret patterns..."
          
          # Create patterns file
          cat > secret-patterns.txt << 'EOF'
          password\s*=\s*['""][^'""]{8,}['""]
          api[_-]?key\s*[=:]\s*['""][^'""]+['""]
          secret[_-]?key\s*[=:]\s*['""][^'""]+['""]
          private[_-]?key\s*[=:]\s*['""][^'""]+['""]
          token\s*[=:]\s*['""][^'""]+['""]
          connectionstring\s*[=:]\s*['""][^'""]+['""]
          aws[_-]?access[_-]?key
          aws[_-]?secret[_-]?key
          github[_-]?token
          EOF
          
          # Search for patterns (excluding test files and this workflow)
          FOUND_SECRETS=false
          while IFS= read -r pattern; do
            if grep -r -i -n --exclude-dir=.git --exclude="*.yml" --exclude="*test*" "$pattern" . 2>/dev/null; then
              FOUND_SECRETS=true
              echo "‚ö†Ô∏è Potential secret found: $pattern"
            fi
          done < secret-patterns.txt
          
          if [[ "$FOUND_SECRETS" == "true" ]]; then
            echo "‚ùå Potential secrets detected in code"
            exit 1
          else
            echo "‚úÖ No obvious secret patterns found"
          fi
          
  # =============================================================================
  # Docker Security Scanning
  # =============================================================================
  docker-security:
    name: üê≥ Docker Security
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.scan_type == 'full' ||
      github.event.inputs.scan_type == 'docker' ||
      github.event_name != 'workflow_dispatch'
    timeout-minutes: 15
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        
      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: üèóÔ∏è Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: modernapi:security-scan
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: üîç Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'modernapi:security-scan'
          format: 'sarif'
          output: 'trivy-container-results.sarif'
          
      - name: üìä Upload Trivy container scan results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-container-results.sarif'
          
      - name: üîç Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          
      - name: üìä Upload Trivy filesystem scan results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-fs-results.sarif'
          
      - name: üîç Dockerfile best practices check
        run: |
          echo "üîç Checking Dockerfile best practices..."
          
          # Install hadolint
          wget -O hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          chmod +x hadolint
          
          # Run hadolint on Dockerfile
          ./hadolint Dockerfile --format json > dockerfile-scan.json || true
          
          # Check results
          if [[ -s dockerfile-scan.json ]]; then
            ERROR_COUNT=$(cat dockerfile-scan.json | jq 'length' 2>/dev/null || echo "0")
            if [[ "$ERROR_COUNT" -gt 0 ]]; then
              echo "‚ö†Ô∏è Found $ERROR_COUNT Dockerfile issues"
              echo "## üê≥ Dockerfile Issues" >> docker-security-summary.md
              echo '```json' >> docker-security-summary.md
              cat dockerfile-scan.json >> docker-security-summary.md
              echo '```' >> docker-security-summary.md
            fi
          fi
          
      - name: üîç Docker Scout vulnerability scan
        if: github.event_name != 'pull_request'
        uses: docker/scout-action@v1
        with:
          command: cves
          image: modernapi:security-scan
          sarif-file: scout-results.sarif
          
      - name: üìä Upload Docker Scout results
        if: always() && github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: scout-results.sarif
          
      - name: üìä Upload Docker security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-security-results
          path: |
            trivy-container-results.sarif
            trivy-fs-results.sarif
            dockerfile-scan.json
            docker-security-summary.md
            scout-results.sarif
          retention-days: 30
          
  # =============================================================================
  # Infrastructure Security
  # =============================================================================
  infrastructure-security:
    name: üèóÔ∏è Infrastructure Security
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.scan_type == 'full' ||
      github.event_name == 'schedule' ||
      github.event_name == 'push'
    timeout-minutes: 10
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        
      - name: üîç Kubernetes security scan
        if: hashFiles('k8s/**/*.yml') != ''
        run: |
          echo "üîç Scanning Kubernetes manifests..."
          
          # Install kube-score
          wget -O kube-score https://github.com/zegl/kube-score/releases/latest/download/kube-score_linux_amd64
          chmod +x kube-score
          
          # Scan Kubernetes manifests
          if [[ -d "k8s" ]]; then
            ./kube-score score k8s/*.yml --output-format json > k8s-security-scan.json 2>/dev/null || true
            
            if [[ -s k8s-security-scan.json ]]; then
              echo "üìä Kubernetes security analysis completed"
              cat k8s-security-scan.json | jq '.[] | select(.grade < 7)' > k8s-issues.json
              
              if [[ -s k8s-issues.json ]]; then
                echo "‚ö†Ô∏è Kubernetes security issues found"
                echo "## ‚ò∏Ô∏è Kubernetes Security Issues" >> infra-security-summary.md
                echo '```json' >> infra-security-summary.md
                cat k8s-issues.json >> infra-security-summary.md
                echo '```' >> infra-security-summary.md
              fi
            fi
          fi
          
      - name: üîç Docker Compose security check
        if: hashFiles('docker-compose*.yml') != ''
        run: |
          echo "üîç Checking Docker Compose security..."
          
          # Check for common security issues in docker-compose files
          find . -name "docker-compose*.yml" | while read -r file; do
            echo "Checking $file..."
            
            # Check for privileged containers
            if grep -q "privileged.*true" "$file"; then
              echo "‚ö†Ô∏è Privileged container found in $file"
            fi
            
            # Check for host network mode
            if grep -q "network_mode.*host" "$file"; then
              echo "‚ö†Ô∏è Host network mode found in $file"
            fi
            
            # Check for volume mounts to sensitive directories
            if grep -q "/var/run/docker.sock" "$file"; then
              echo "‚ö†Ô∏è Docker socket mount found in $file"
            fi
            
            # Check for default passwords
            if grep -i -E "(password|secret).*=.*(password|secret|admin|root)" "$file"; then
              echo "‚ö†Ô∏è Potential default password found in $file"
            fi
          done
          
      - name: üîç GitHub Actions security check
        run: |
          echo "üîç Checking GitHub Actions security..."
          
          # Check workflow files for security issues
          find .github/workflows -name "*.yml" | while read -r workflow; do
            echo "Checking workflow: $workflow"
            
            # Check for dangerous permissions
            if grep -q "permissions:.*write-all" "$workflow"; then
              echo "‚ö†Ô∏è Overly broad permissions in $workflow"
            fi
            
            # Check for hardcoded secrets
            if grep -i -E "(api[_-]?key|secret|token|password).*[=:].*(sk-|ghp_|gho_)" "$workflow"; then
              echo "‚ö†Ô∏è Potential hardcoded secret in $workflow"
            fi
            
            # Check for external action versions
            grep -E "uses:.*@(?!v[0-9])" "$workflow" | while read -r line; do
              echo "‚ÑπÔ∏è Unversioned action found: $line"
            done
          done
          
      - name: üìä Upload infrastructure security results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: infrastructure-security-results
          path: |
            k8s-security-scan.json
            k8s-issues.json
            infra-security-summary.md
          retention-days: 30
          
  # =============================================================================
  # Security Summary & Reporting
  # =============================================================================
  security-summary:
    name: üìä Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security, secret-scan, docker-security, infrastructure-security]
    if: always()
    
    steps:
      - name: üì• Download all security artifacts
        if: always()
        uses: actions/download-artifact@v4
        with:
          path: security-results
          
      - name: üìä Generate security summary
        if: always()
        run: |
          echo "üìä Generating comprehensive security summary..."
          
          cat > security-report.md << 'EOF'
          # üîí Security Scan Report
          
          **Scan Date:** $(date -u)
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          
          ## üìã Scan Results Overview
          
          | Component | Status | Issues |
          |-----------|--------|---------|
          EOF
          
          # Dependency scan results
          if [[ -f "security-results/dependency-scan-results/dependency-scan.log" ]]; then
            if grep -q "vulnerable" security-results/dependency-scan-results/dependency-scan.log; then
              echo "| Dependencies | ‚ùå Issues Found | [Details](#dependencies) |" >> security-report.md
            else
              echo "| Dependencies | ‚úÖ Clean | None |" >> security-report.md
            fi
          else
            echo "| Dependencies | ‚è≠Ô∏è Skipped | N/A |" >> security-report.md
          fi
          
          # Code security results
          if [[ -d "security-results/code-security-results" ]]; then
            echo "| Code Analysis | ‚úÖ Completed | [Details](#code-analysis) |" >> security-report.md
          else
            echo "| Code Analysis | ‚è≠Ô∏è Skipped | N/A |" >> security-report.md
          fi
          
          # Secret scan results
          NEEDS_SECRET_CHECK="${{ needs.secret-scan.result }}"
          if [[ "$NEEDS_SECRET_CHECK" == "success" ]]; then
            echo "| Secret Scan | ‚úÖ Clean | None |" >> security-report.md
          elif [[ "$NEEDS_SECRET_CHECK" == "failure" ]]; then
            echo "| Secret Scan | ‚ùå Issues Found | [Details](#secrets) |" >> security-report.md
          else
            echo "| Secret Scan | ‚è≠Ô∏è Skipped | N/A |" >> security-report.md
          fi
          
          # Docker security results
          if [[ -d "security-results/docker-security-results" ]]; then
            echo "| Docker Security | ‚úÖ Completed | [Details](#docker) |" >> security-report.md
          else
            echo "| Docker Security | ‚è≠Ô∏è Skipped | N/A |" >> security-report.md
          fi
          
          # Infrastructure security results
          if [[ -d "security-results/infrastructure-security-results" ]]; then
            echo "| Infrastructure | ‚úÖ Completed | [Details](#infrastructure) |" >> security-report.md
          else
            echo "| Infrastructure | ‚è≠Ô∏è Skipped | N/A |" >> security-report.md
          fi
          
          # Add detailed sections
          echo "" >> security-report.md
          echo "## üìñ Detailed Results" >> security-report.md
          
          # Include dependency details if available
          if [[ -f "security-results/dependency-scan-results/security-summary.md" ]]; then
            echo "" >> security-report.md
            echo "### Dependencies" >> security-report.md
            cat security-results/dependency-scan-results/security-summary.md >> security-report.md
          fi
          
          # Include Docker details if available
          if [[ -f "security-results/docker-security-results/docker-security-summary.md" ]]; then
            echo "" >> security-report.md
            echo "### Docker" >> security-report.md
            cat security-results/docker-security-results/docker-security-summary.md >> security-report.md
          fi
          
          # Include infrastructure details if available
          if [[ -f "security-results/infrastructure-security-results/infra-security-summary.md" ]]; then
            echo "" >> security-report.md
            echo "### Infrastructure" >> security-report.md
            cat security-results/infrastructure-security-results/infra-security-summary.md >> security-report.md
          fi
          
          # Add recommendations
          echo "" >> security-report.md
          echo "## üöÄ Recommendations" >> security-report.md
          echo "1. Review and address any high/critical vulnerabilities immediately" >> security-report.md
          echo "2. Update dependencies to latest secure versions" >> security-report.md
          echo "3. Implement security headers and best practices" >> security-report.md
          echo "4. Regular security scans in CI/CD pipeline" >> security-report.md
          echo "5. Security awareness training for development team" >> security-report.md
          
          echo "‚úÖ Security report generated"
          
      - name: üìä Create security summary for GitHub
        if: always()
        run: |
          echo "## üîí Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Scan completed at:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          OVERALL_STATUS="‚úÖ Passed"
          
          if [[ "${{ needs.dependency-scan.result }}" == "failure" || 
                "${{ needs.secret-scan.result }}" == "failure" ]]; then
            OVERALL_STATUS="‚ùå Issues Found"
          fi
          
          echo "**Overall Status:** $OVERALL_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependencies:** ${{ needs.dependency-scan.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Security:** ${{ needs.code-security.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Secret Scan:** ${{ needs.secret-scan.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Security:** ${{ needs.docker-security.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Infrastructure:** ${{ needs.infrastructure-security.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "$OVERALL_STATUS" == "‚ùå Issues Found" ]]; then
            echo "‚ö†Ô∏è **Action Required:** Please review and address security issues before deployment." >> $GITHUB_STEP_SUMMARY
          else
            echo "üéâ **All security scans passed!** Ready for deployment." >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: üìä Upload comprehensive security report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-security-report
          path: |
            security-report.md
            security-results/
          retention-days: 90
          
      # Optional: Create GitHub issue for security findings
      - name: üö® Create security issue
        if: |
          always() &&
          (needs.dependency-scan.result == 'failure' || needs.secret-scan.result == 'failure') &&
          github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = `üîí Security Issues Detected - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            # üîí Automated Security Scan Results
            
            **Scan Date:** ${new Date().toISOString()}
            **Repository:** ${{ github.repository }}
            **Branch:** ${{ github.ref_name }}
            
            ## ‚ö†Ô∏è Issues Detected
            
            The automated security scan has detected potential security issues that require attention:
            
            - **Dependencies:** ${{ needs.dependency-scan.result }}
            - **Secret Scan:** ${{ needs.secret-scan.result }}
            - **Code Security:** ${{ needs.code-security.result }}
            
            ## üîó Detailed Reports
            
            Download the comprehensive security report from the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).
            
            ## üöÄ Action Items
            
            1. Review all high and critical severity findings
            2. Update vulnerable dependencies
            3. Address any secrets found in code
            4. Implement recommended security fixes
            5. Re-run security scans to verify fixes
            
            ## üìã Checklist
            
            - [ ] Review dependency vulnerabilities
            - [ ] Address secret scanning findings
            - [ ] Update vulnerable packages
            - [ ] Test security fixes
            - [ ] Re-run security scans
            - [ ] Close this issue when all critical issues are resolved
            
            ---
            
            *This issue was automatically created by the security scanning workflow.*
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'bug', 'priority-high']
            });