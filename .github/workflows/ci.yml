name: 🔄 Continuous Integration

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  POSTGRES_CONNECTION_STRING: "Host=localhost;Database=modernapi_test;Username=postgres;Password=postgres"
  JWT_SECRET: "ThisIsATestJWTSecretKeyForCITestingPurposes123456789!"

# Concurrency: cancel previous runs on new push
concurrency:
  group: ci-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # =============================================================================
  # Code Quality & Linting
  # =============================================================================
  lint:
    name: 🔍 Lint & Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: ⚡ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: 📦 Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: nuget-${{ runner.os }}-
          
      - name: 🔧 Restore dependencies
        run: dotnet restore backend/
        
      - name: 🎨 Check code formatting
        run: dotnet format --verify-no-changes --verbosity diagnostic
        
      - name: 📋 Run code analysis
        run: |
          dotnet build --no-restore --configuration Release
          # Add additional static analysis tools here
          
  # =============================================================================
  # Commit Message Validation
  # =============================================================================
  commitlint:
    name: 📝 Validate Commits
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 📦 Install commitlint
        run: |
          npm install -g @commitlint/cli @commitlint/config-conventional
          
      - name: 📝 Validate commit messages
        run: |
          commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose
          
  # =============================================================================
  # Build & Test Matrix
  # =============================================================================
  build-and-test:
    name: 🏗️ Build & Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: modernapi_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: ⚡ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: 📦 Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ matrix.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: nuget-${{ matrix.os }}-
          
      - name: 🔧 Restore dependencies
        run: dotnet restore backend/
        
      - name: 🏗️ Build solution
        run: dotnet build backend/ --no-restore --configuration Release
        
      - name: 📊 Apply database migrations
        run: |
          dotnet tool install --global dotnet-ef
          dotnet ef database update --project backend/ModernAPI.Infrastructure --startup-project backend/ModernAPI.API
        env:
          POSTGRES_CONNECTION_STRING: ${{ env.POSTGRES_CONNECTION_STRING }}
          
      - name: 🧪 Run unit tests
        run: |
          dotnet test backend/tests/ModernAPI.Domain.Tests --no-build --configuration Release --logger trx --results-directory TestResults/Unit
          dotnet test backend/tests/ModernAPI.Application.Tests --no-build --configuration Release --logger trx --results-directory TestResults/Unit
          
      - name: 🧪 Run integration tests
        run: |
          dotnet test backend/tests/ModernAPI.Infrastructure.Tests --no-build --configuration Release --logger trx --results-directory TestResults/Integration
          dotnet test backend/tests/ModernAPI.API.Tests --no-build --configuration Release --logger trx --results-directory TestResults/Integration
        env:
          POSTGRES_CONNECTION_STRING: ${{ env.POSTGRES_CONNECTION_STRING }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          
      - name: 🧪 Run end-to-end tests
        run: |
          dotnet test backend/tests/ModernAPI.IntegrationTests --no-build --configuration Release --logger trx --results-directory TestResults/E2E
        env:
          POSTGRES_CONNECTION_STRING: ${{ env.POSTGRES_CONNECTION_STRING }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          
      - name: 📊 Publish test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: 🧪 Test Results (${{ matrix.os }})
          path: TestResults/**/*.trx
          reporter: dotnet-trx
          fail-on-error: true
          
  # =============================================================================
  # Code Coverage
  # =============================================================================
  coverage:
    name: 📊 Code Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: modernapi_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: ⚡ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: 📦 Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-coverage-${{ hashFiles('**/*.csproj') }}
          restore-keys: nuget-coverage-
          
      - name: 🔧 Restore dependencies
        run: dotnet restore backend/
        
      - name: 🏗️ Build solution
        run: dotnet build --no-restore --configuration Debug
        
      - name: 📊 Apply database migrations
        run: |
          dotnet tool install --global dotnet-ef
          dotnet ef database update --project backend/ModernAPI.Infrastructure --startup-project backend/ModernAPI.API
        env:
          POSTGRES_CONNECTION_STRING: ${{ env.POSTGRES_CONNECTION_STRING }}
          
      - name: 📊 Run tests with coverage
        run: |
          dotnet test --configuration Debug \
            --collect:"XPlat Code Coverage" \
            --results-directory TestResults \
            --logger trx \
            --settings tests/coverlet.runsettings
        env:
          POSTGRES_CONNECTION_STRING: ${{ env.POSTGRES_CONNECTION_STRING }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          
      - name: 📊 Generate coverage report
        run: |
          dotnet tool install --global dotnet-reportgenerator-globaltool
          reportgenerator \
            -reports:"TestResults/**/coverage.cobertura.xml" \
            -targetdir:"TestResults/CoverageReport" \
            -reporttypes:"Html;Badges;JsonSummary"
            
      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: TestResults
          flags: unittests
          name: ModernAPI Coverage
          
      - name: 📊 Coverage comment on PR
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          path: TestResults/CoverageReport/badge_combined.svg
          
  # =============================================================================
  # Security Scan
  # =============================================================================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: ⚡ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: 📦 Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-security-${{ hashFiles('**/*.csproj') }}
          restore-keys: nuget-security-
          
      - name: 🔧 Restore dependencies
        run: dotnet restore backend/
        
      - name: 🔒 Run security scan
        run: |
          dotnet list package --vulnerable --include-transitive 2>&1 | tee security-scan.log
          if grep -i "vulnerable" security-scan.log; then
            echo "⚠️ Vulnerable packages detected!"
            exit 1
          else
            echo "✅ No vulnerable packages found"
          fi
          
      - name: 🔒 Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: security-scan.log
          
  # =============================================================================
  # Docker Build Test
  # =============================================================================
  docker-build:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🐳 Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: modernapi:ci-test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: 🧪 Test Docker image
        run: |
          # Start the container with a basic configuration
          docker run -d --name modernapi-test \
            -e ASPNETCORE_ENVIRONMENT=Development \
            -e JWT_SECRET="${{ env.JWT_SECRET }}" \
            -p 8080:8080 \
            modernapi:ci-test
            
          # Wait for the container to start
          sleep 10
          
          # Test health endpoint
          curl -f http://localhost:8080/health || exit 1
          
          # Cleanup
          docker stop modernapi-test
          docker rm modernapi-test
          
  # =============================================================================
  # Performance Benchmark
  # =============================================================================
  performance:
    name: ⚡ Performance Benchmark
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: modernapi_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: ⚡ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: 🔧 Restore and build
        run: |
          dotnet restore
          dotnet build --no-restore --configuration Release
          
      - name: 📊 Apply database migrations
        run: |
          dotnet tool install --global dotnet-ef
          dotnet ef database update --project backend/ModernAPI.Infrastructure --startup-project backend/ModernAPI.API
        env:
          POSTGRES_CONNECTION_STRING: ${{ env.POSTGRES_CONNECTION_STRING }}
          
      - name: 🚀 Start application
        run: |
          dotnet run --project ModernAPI.API --configuration Release --no-build &
          APP_PID=$!
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV
          
          # Wait for app to start
          for i in {1..30}; do
            if curl -f http://localhost:5000/health >/dev/null 2>&1; then
              echo "✅ Application started successfully"
              break
            fi
            echo "⏳ Waiting for application to start... ($i/30)"
            sleep 2
          done
        env:
          POSTGRES_CONNECTION_STRING: ${{ env.POSTGRES_CONNECTION_STRING }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          
      - name: ⚡ Run performance tests
        run: |
          # Install k6 for load testing
          curl -s https://github.com/grafana/k6/releases/download/v0.47.0/k6-v0.47.0-linux-amd64.tar.gz | tar xvz --strip-components 1
          
          # Create basic load test script
          cat > loadtest.js << 'EOF'
          import http from 'k6/http';
          import { check } from 'k6';
          
          export let options = {
            stages: [
              { duration: '30s', target: 10 },
              { duration: '1m', target: 10 },
              { duration: '30s', target: 0 },
            ],
          };
          
          export default function() {
            let res = http.get('http://localhost:5000/health');
            check(res, {
              'status is 200': (r) => r.status === 200,
              'response time < 500ms': (r) => r.timings.duration < 500,
            });
          }
          EOF
          
          # Run load test
          ./k6 run loadtest.js --out json=perf-results.json
          
      - name: 🧹 Cleanup
        if: always()
        run: |
          if [ ! -z "$APP_PID" ]; then
            kill $APP_PID || true
          fi
          
      - name: 📊 Upload performance results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: perf-results.json
          
  # =============================================================================
  # Aggregate Results
  # =============================================================================
  ci-success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    needs: [lint, build-and-test, coverage, security, docker-build]
    if: always()
    
    steps:
      - name: ✅ Check all jobs status
        run: |
          echo "Lint: ${{ needs.lint.result }}"
          echo "Build & Test: ${{ needs.build-and-test.result }}"
          echo "Coverage: ${{ needs.coverage.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Docker Build: ${{ needs.docker-build.result }}"
          
          if [[ "${{ needs.lint.result }}" == "success" && 
                "${{ needs.build-and-test.result }}" == "success" && 
                "${{ needs.coverage.result }}" == "success" && 
                "${{ needs.security.result }}" == "success" && 
                "${{ needs.docker-build.result }}" == "success" ]]; then
            echo "🎉 All CI checks passed!"
            exit 0
          else
            echo "❌ Some CI checks failed!"
            exit 1
          fi