name: Deploy to VPS

on:
  push:
    branches: [main]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Build Backend
      run: |
        cd backend
        dotnet restore
        dotnet build --configuration Release --no-restore
        dotnet test --configuration Release --no-build --verbosity normal

    - name: Build Frontend
      run: |
        cd frontend
        bun install
        bun run build

    - name: Create deployment package
      run: |
        # Create deployment directory structure
        mkdir -p deploy/backend deploy/frontend deploy/docker
        
        # Copy backend files
        cd backend
        dotnet publish ModernAPI.API/ModernAPI.API.csproj -c Release -o ../deploy/backend --no-build
        cd ..
        
        # Copy frontend build
        cp -r frontend/dist/* deploy/frontend/
        
        # Copy Docker files
        cp docker-compose.production.yml deploy/docker/
        cp backend/ModernAPI.API/Dockerfile deploy/docker/
        cp frontend/Dockerfile deploy/docker/frontend.Dockerfile

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          set -e
          
          # Create backup of current deployment
          if [ -d "/srv/modernapi/current" ]; then
            sudo rm -rf /srv/modernapi/backup
            sudo mv /srv/modernapi/current /srv/modernapi/backup
            echo "✅ Created backup of previous deployment"
          fi
          
          # Create new deployment directory
          sudo mkdir -p /srv/modernapi/current
          sudo chown deploy:deploy /srv/modernapi/current
          
          # Clone latest code
          cd /srv/modernapi
          git fetch origin
          git reset --hard origin/main
          echo "✅ Updated code from repository"
          
          # Update environment file if changed
          if [ ! -f .env.production ]; then
            echo "❌ Error: .env.production file not found!"
            exit 1
          fi
          
          # Build and deploy with Docker Compose
          docker compose -f docker-compose.production.yml down || true
          docker compose -f docker-compose.production.yml pull
          docker compose -f docker-compose.production.yml up -d --build
          
          # Wait for services to be ready
          echo "⏳ Waiting for services to start..."
          sleep 30
          
          # Health check
          if curl -f -s https://${{ secrets.DOMAIN }}/health > /dev/null; then
            echo "✅ Deployment successful - Health check passed"
            # Cleanup old images
            docker image prune -f
          else
            echo "❌ Health check failed - Rolling back"
            docker compose -f docker-compose.production.yml down
            if [ -d "/srv/modernapi/backup" ]; then
              sudo rm -rf /srv/modernapi/current
              sudo mv /srv/modernapi/backup /srv/modernapi/current
              docker compose -f docker-compose.production.yml up -d
              echo "🔄 Rollback completed"
            fi
            exit 1
          fi

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "🚀 Deployment to ${{ secrets.DOMAIN }} completed successfully!"
        else
          echo "❌ Deployment failed. Check logs and rollback if necessary."
        fi